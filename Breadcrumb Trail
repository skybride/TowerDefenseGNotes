Breadcrumb Trail

*Slight adjustments needs to be made on to Pathfinder.cs

In 'QueueNewNeighbours' method add the following into the if statement condition

Should look like this:

void QueueNewNeighbours (Vector2Int neighbourCoordinates)
	{
		Waypoint neighbour = grid [neighbourCoordinates];
		if (neighbour.isExplored || queue.Contains(neighbour)) 
		{
			//do nothing
		} 
		else 
		{

NOTE: This conditon states: if neighbour is already explored do nothing OR if queue arleady contains the neighbour do nothing.
This should stop the same waypoint to queue more than once.

---

What is the reverse path?

[Step 1 : ]
Start storing how each waypoint was found -> Store in the Waypoint.cs. Create a public 'public Waypoint exploredFrom;'

Should look like this:

public class Waypoint : MonoBehaviour {

	public bool isExplored = false;
	public Waypoint exploredFrom;



[Step 2 : ]
In Pathfinder.cs -> promote searchCenter to a member variable as it is being called in various methods. (named differently -> which could cause bugs and errors later on) -> Remember you can not declare searchCenter as a variable by denoting var infront of searchCenter. You need to decalare the 'Type'. In this case the 'Type' is 'Waypoint'	

NOTE: remove public on the bool isRunning -> was made public only for testing purposes.

This also means we can remove the var portion of 'var searchCenter' in the 'Pathfind()' method. (Since we are not instantiating this variable in this method...it has already been declared as a member variable)

'searchCenter' does not have to declared and passed into 'HaltIfEndFound' or 'ExploreNeighbours' (print can also now be removed).

Should look like this:

public class Pathfinder : MonoBehaviour {

	[SerializeField] Waypoint startWaypoint, endWaypoint;

	Dictionary<Vector2Int, Waypoint> grid = new Dictionary<Vector2Int, Waypoint>();
	Queue<Waypoint>queue = new Queue<Waypoint>();
	bool isRunning = true;
	Waypoint searchCenter;

	Vector2Int[] directions = {
		Vector2Int.up,
		Vector2Int.right,
		Vector2Int.down,
		Vector2Int.left
	};

	// Use this for initialization
	void Start () {
		LoadBlocks ();
		ColorStartAndEnd ();
		Pathfind ();
		//ExploreNeighbours ();
	}

	private void Pathfind ()
	{
		queue.Enqueue (startWaypoint);

		while (queue.Count > 0 && isRunning) 
		{
			searchCenter = queue.Dequeue ();
			HaltIfEndFound ();
			ExploreNeighbours ();
			searchCenter.isExplored = true;
		}
		print ("Finished pathfinding?");
	}

[Step 3 : ]

Further remove searchCenter being a formal parameter for the 'HaltIfEndFound' and 'ExploreNeighbours' private methods. -> For 'ExploreNeighbours' replace 'from.GetGridPos' to 'searchCenter.GetGridPos'
(from what? from the searchCenter)

NOTE: Why did we make this change? searchCenter was an instance that was being used in so many different methods it makes sense to promote it to a member variable.

Should look like this: 

	private void Pathfind ()
	{
		queue.Enqueue (startWaypoint);

		while (queue.Count > 0 && isRunning) 
		{
			searchCenter = queue.Dequeue ();
			HaltIfEndFound ();
			ExploreNeighbours ();
			searchCenter.isExplored = true;
		}
		print ("Finished pathfinding?");
	}

	private void HaltIfEndFound()
	{
		if (searchCenter == endWaypoint) 
		{
			print ("Searching from end node, therefore stopping");
			isRunning = false;
		}
	}

	private void ExploreNeighbours ()
	{
		if (!isRunning) { return; }
		foreach (Vector2Int direction in directions) 
		{
			Vector2Int neighbourCoordinates = searchCenter.GetGridPos () + direction;
			try
			{
				QueueNewNeighbours (neighbourCoordinates);
			}
			catch
			{
			}
		}
	}

Test and make sure everything still works!

[Step 4 : ]	

*Go to 'QueueNewNeighbours' remove the print in the else statement.

Making the neighbour that was explored the new searchCenter

Should look like this:

void QueueNewNeighbours (Vector2Int neighbourCoordinates)
	{
		Waypoint neighbour = grid [neighbourCoordinates];
		if (neighbour.isExplored || queue.Contains(neighbour)) 
		{
			//do nothing
		} 
		else 
		{
			neighbour.SetTopColor (Color.blue);
			queue.Enqueue (neighbour);
			neighbour.exploredFrom = searchCenter;
		}
	}


[Step 5 :]

*Optional
Changing where the setting 'TopColor' should be done in code.
Waypoint color should be set from Waypoint.cs not Pathfinder.cs

Should look like this:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class Waypoint : MonoBehaviour {

	[SerializeField] Color exploredColor;

	public bool isExplored = false;
	public Waypoint exploredFrom;

	Vector2Int gridPos;

	const int gridSize = 10;

	void Update()
	{
		MeshRenderer topMeshRender = transform.Find ("Top").GetComponent<MeshRenderer> ();
		topMeshRender.material.color = exploredColor;
	}

---

